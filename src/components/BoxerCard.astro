---
const { id, name } = Astro.props;
---

<a
  class="boxer-card inline-block transition-all w-10 sm:w-14 md:w-16 lg:w-24 xl:w-26 group relative rounded-lg overflow-hidden duration-300 hover:-translate-y-3 hover:scale-105 hover:shadow-lg hover:z-20"
  href={`/luchador/${id}`}
  data-id={id}
>
  <div class="relative overflow-hidden">
    <img
      class="aspect-[900/1200] h-full w-full object-cover transition-transform duration-500 group-hover:scale-110"
      src={`/images/fighters/cards/${id}.webp`}
      alt={`Tarjeta del boxeador ${name}`}
    />

    <div
      class="absolute inset-0 bg-gradient-to-tr from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700 ease-in-out"
    >
    </div>

    <div
      class="absolute inset-0 border-0 group-hover:border-2 border-theme-tickle-me-pink/70 rounded-lg transition-all duration-300 opacity-0 group-hover:opacity-100"
    >
    </div>
  </div>

  <div
    class="absolute inset-0 flex flex-col items-center justify-end bg-gradient-to-t from-pink-950/90 via-pink-950/40 to-transparent p-2 opacity-0 group-hover:opacity-100 transition-all duration-300 translate-y-2 group-hover:translate-y-0"
  >
    <h3
      class="text-theme-tickle-me-pink text-sm font-bold tracking-wide drop-shadow-[0_1px_2px_rgba(0,0,0,0.8)]"
    >
      {name}
    </h3>
  </div>

  <div
    class="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-0 h-1 bg-theme-tickle-me-pink rounded-t-md group-hover:w-2/3 transition-all duration-300"
  >
  </div>
</a>

<style>
  @media (prefers-reduced-motion) {
    .boxer-card,
    .boxer-card:hover,
    .boxer-card img,
    .boxer-card div {
      transition: opacity 0.3s ease !important;
      transform: none !important;
    }
  }
</style>

<script>
 document.addEventListener("astro:page-load", () => {
  const boxerCards = document.querySelectorAll(".boxer-card");
  let timeoutId = null;
  const eventListeners = [];
  const pairings = {
    0: 5, 1: 4, 2: 3, 6: 13, 7: 12, 8: 11, 9: 10,
    5: 0, 4: 1, 3: 2, 13: 6, 12: 7, 11: 8, 10: 9
  };

  boxerCards.forEach((singleBoxerCard, index) => {
    let isClicked = false; // Prevent mouseleave from triggering after click

    const mouseEnterHandler = () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
        timeoutId = null;
      }
      const id = singleBoxerCard.getAttribute("data-id");
      if (id) {
        document.dispatchEvent(new CustomEvent("boxer-card-hovered", { detail: { id } }));
      }

      // Apply grayscale to all cards
      boxerCards.forEach((card) => card.classList.add("grayscale-100"));
      
      // Remove grayscale from hovered card and its pair
      singleBoxerCard.classList.remove("grayscale-100");
      if (pairings[index] !== undefined) {
        boxerCards[pairings[index]].classList.remove("grayscale-100");
      }
    };

    const mouseLeaveHandler = () => {
      if (isClicked) return;
      timeoutId = setTimeout(() => {
        document.dispatchEvent(new CustomEvent("boxer-card-exit"));
        boxerCards.forEach((card) => card.classList.remove("grayscale-100"));
      }, 500);
    };

    const clickHandler = () => {
      isClicked = true;
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };

    singleBoxerCard.addEventListener("mouseenter", mouseEnterHandler);
    singleBoxerCard.addEventListener("mouseleave", mouseLeaveHandler);
    singleBoxerCard.addEventListener("click", clickHandler);

    eventListeners.push({
      element: singleBoxerCard,
      events: [
        { type: "mouseenter", handler: mouseEnterHandler },
        { type: "mouseleave", handler: mouseLeaveHandler },
        { type: "click", handler: clickHandler },
      ],
    });
  });

  // Cleanup event listeners to prevent memory leaks
  const cleanupEventListeners = () => {
    eventListeners.forEach(({ element, events }) => {
      events.forEach(({ type, handler }) => {
        element.removeEventListener(type, handler);
      });
    });
  };

  window.addEventListener("beforeunload", cleanupEventListeners);
});
</script>
