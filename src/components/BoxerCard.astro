---
const { id, name } = Astro.props
---
<a
  class="boxer-card inline-block transition hover:-translate-y-3 w-10 sm:w-14 md:w-16 lg:w-24 xl:w-26 group relative rounded overflow-hidden"
  href={`/luchador/${id}`}
  data-id={id}
>
  <img
    class="aspect-[900/1200] h-full w-full object-cover"
    src={`/images/fighters/cards/${id}.png`}
    alt={`Tarjeta del boxeador ${name}`}
  />

  <div
    class="absolute inset-0 flex flex-col items-center justify-end bg-gradient-to-t from-pink-950/90 via-transparent to-transparent p-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
  >
    <h3 class="text-theme-tickle-me-pink text-sm">{name}</h3>
  </div>
</a>

<script>
  document.addEventListener("astro:page-load", () => {
    const boxerCards = document.querySelectorAll(".boxer-card");
    let timeoutId: number | null = null;

    const eventListeners = [];

    boxerCards.forEach((singleBoxerCard) => {
      // Flag to track if the card is clicked
      let isClicked = false;

      const mouseEnterHandler = () => {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }

        const id = singleBoxerCard.getAttribute("data-id");
        if (id) {
          const event = new CustomEvent("boxer-card-hovered", {
            detail: { id },
          });
          document.dispatchEvent(event);
        }
      };

      const mouseLeaveHandler = () => {
        if (isClicked) {
          return;
        }

        timeoutId = setTimeout(() => {
          const event = new CustomEvent("boxer-card-exit");
          document.dispatchEvent(event);
        }, 500);
      };

      const clickHandler = () => {
        isClicked = true;
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
      };

      // Attach event listeners
      singleBoxerCard.addEventListener("mouseenter", mouseEnterHandler);
      singleBoxerCard.addEventListener("mouseleave", mouseLeaveHandler);
      singleBoxerCard.addEventListener("click", clickHandler);

      // Store references to the listeners for cleanup
      eventListeners.push({
        element: singleBoxerCard,
        events: [
          { type: "mouseenter", handler: mouseEnterHandler },
          { type: "mouseleave", handler: mouseLeaveHandler },
          { type: "click", handler: clickHandler },
        ],
      });
    });

    // Cleanup function for removing event listeners
    const cleanupEventListeners = () => {
      eventListeners.forEach(({ element, events }) => {
        events.forEach(({ type, handler }) => {
          element.removeEventListener(type, handler);
        });
      });
    };

    // Call cleanup on page unload or when Astro component is destroyed
    window.addEventListener("beforeunload", cleanupEventListeners);
  });
</script>
